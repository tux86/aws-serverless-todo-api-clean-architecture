service: todo-app

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${env:DB_REGION}
  environment:
    DB_REGION: ${env:DB_REGION}
    DB_TABLE_NAME: ${env:DB_TABLE_NAME}
    COGNITO_REGION: ${env:COGNITO_REGION}
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_APP_CLIENT_ID: !Ref CognitoUserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${env:DB_REGION}:*:table/${env:DB_TABLE_NAME}"

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack

custom:
  dotenv:
    path: .env
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true

functions:
  createTodo:
    handler: src/application/routes/todoRoutes.createTodo
    events:
      - httpApi:
          path: /todos
          method: POST
  #          cors: true
  #          authorizer:
  #            type: JWT
  #            issuer: https://cognito-idp.${env:COGNITO_REGION}.amazonaws.com/${env:COGNITO_USER_POOL_ID}
  #            audience:
  #              - ${env:COGNITO_APP_CLIENT_ID}


  getTodoById:
    handler: src/application/routes/todoRoutes.getTodoById
    events:
      - httpApi:
          path: /todos/{id}
          method: GET
#          cors: true
  #          authorizer:
  #            type: JWT
  #            issuer: https://cognito-idp.${env:COGNITO_REGION}.amazonaws.com/${env:COGNITO_USER_POOL_ID}
  #            audience:
  #              - ${env:COGNITO_APP_CLIENT_ID}


  updateTodo:
    handler: src/application/routes/todoRoutes.updateTodo
    events:
      - httpApi:
          path: /todos/{id}
          method: PUT
#          cors: true
#          authorizer:
#            type: JWT
#            issuer: https://cognito-idp.${env:COGNITO_REGION}.amazonaws.com/${env:COGNITO_USER_POOL_ID}
#            audience:
#              - ${env:COGNITO_APP_CLIENT_ID}

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
#    CognitoUserPool:
#      Type: AWS::Cognito::UserPool
#      Properties:
#        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
#        Schema:
#          - Name: email
#            AttributeDataType: String
#            Mutable: true
#            Required: true
#        AutoVerifiedAttributes:
#          - email
#        Policies:
#          PasswordPolicy:
#            MinimumLength: 8
#            RequireUppercase: true
#            RequireLowercase: true
#            RequireNumbers: true
#            RequireSymbols: true
#    CognitoUserPoolClient:
#      Type: AWS::Cognito::UserPoolClient
#      Properties:
#        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
#        UserPoolId: !Ref CognitoUserPool
#        ExplicitAuthFlows:
#          - ADMIN_NO_SRP_AUTH
#        GenerateSecret: false
